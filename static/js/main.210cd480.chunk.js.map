{"version":3,"sources":["Header.js","Tweet.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","Tweet","props","state","predictObj","sentence","barData","toxicity","identityAttack","insult","obscene","severeToxicity","sexualExplicit","threat","surface","name","tab","this","resolveModel","model","classify","classifying","setState","results","probabilities","toFixed","console","log","tfvis","barchart","outputArr","key","hasOwnProperty","push","index","value","predictions","placeholder","type","onChange","e","target","onClick","predict","getBarValue","solveViz","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.210cd480.chunk.js","sourcesContent":["import './styles.css';\nimport './Header.css';\nimport React from 'react';\n\nfunction Header() {\n  return(\n    <h1 className='header'></h1>\n  )\n}\n\nexport default Header;\n","import './App.css';\nimport './styles.css';\nimport './Tweet.css';\nimport React from 'react';\nimport * as tf from '@tensorflow/tfjs';\nimport * as tfvis from '@tensorflow/tfjs-vis';\nimport * as toxicity from '@tensorflow-models/toxicity';\n\n\nclass Tweet extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      // predictions: null,\n      predictObj : {},\n      sentence: '',\n      barData : [],\n      toxicity: 0,\n      identityAttack: 0,\n      insult: 0,\n      obscene: 0,\n      severeToxicity: 0,\n      sexualExplicit: 0,\n      threat: 0\n    };\n\n    // Render to visor\n    this.surface = { name: 'Bar chart', tab: 'Charts' };\n  }\n\n  async resolveModel() {\n    const threshold = 0.9;\n    // create model\n    return await toxicity.load(threshold);\n    // console.log(model)\n  }\n  \n  async predict(sentence) {\n    const model = await this.resolveModel()\n    const classifying = await model.classify([sentence])\n    this.setState({\n      identityAttack: classifying[0].results[0].probabilities[1].toFixed(3),\n      insult: classifying[1].results[0].probabilities[1].toFixed(3),\n      obscene: classifying[2].results[0].probabilities[1].toFixed(3),\n      severeToxicity: classifying[3].results[0].probabilities[1].toFixed(3),\n      sexualExplicit: classifying[4].results[0].probabilities[1].toFixed(3),\n      threat: classifying[5].results[0].probabilities[1].toFixed(3),\n      toxicity: classifying[6].results[0].probabilities[1].toFixed(3),\n      predictObj: classifying\n    })\n    console.log(classifying)\n    return classifying[6].results[0].probabilities[1]\n  }\n\n  //render the visualization\n  async solveViz() {\n    return await tfvis.render.barchart(this.surface, this.state.barData)\n  }\n\n  // get the values for the bar chart from the predictions\n  getBarValue() {\n    const predictObj = this.state.predictObj\n    let outputArr = []\n    for (let key in predictObj) {\n      if (predictObj.hasOwnProperty(key)) {\n          console.log(key + \" -> \" + predictObj[key]['label']);\n          console.log(predictObj[key].results[0].probabilities[1])\n          //append object to output array\n          outputArr.push({index: predictObj[key]['label'], value: predictObj[key].results[0].probabilities[1]})\n      }\n    }\n    this.setState({barData: outputArr})\n    console.log('bar data',this.state.barData)\n  }\n\n  render() {\n    \n    // console.log(tfvis.render.barchart(surface, data))\n    // render the visualization \n    // console.log(this.solveViz())\n    console.log('prediction',this.state.predictions)\n    console.log('predict obj',this.state.predictObj)\n    console.log('bar data',this.state.barData)\n    return (\n\n      <div className=\"App\">\n      <p className='h1'>What is your tweet? üê¶</p>\n      <input \n        placeholder='type something here...'\n        type=\"text\" \n        value={this.state.sentence} \n        onChange={(e) => this.setState({sentence: e.target.value})} \n      />\n      \n      <button \n        type='submit'\n        onClick={() => \n        {\n          this.predict(this.state.sentence)\n          //get the value for the bar graph\n          this.getBarValue()\n          // re render the visuals\n          // this.solveViz()\n          console.log('bar data',this.state.barData)\n          // tfvis.render.barchart(this.surface, this.state.barData)\n        }}\n      >\n        Submit\n      \n      </button>\n\n\n      <button \n        className='success'\n        onClick={() => \n        {\n          //get the value for the bar graph\n          this.getBarValue()\n          // re render the visuals\n          this.solveViz()\n          console.log('bar data',this.state.barData)\n        }}\n      >\n        Click for Viz\n      </button>\n      <div className='data'>\n        <p>Identity attack likelihood: {this.state.identityAttack}</p>\n        <p>Insult likelihood: {this.state.insult}</p>\n        <p>Obscene likelihood: {this.state.obscene}</p>\n        <p>Severe toxicity likelihood: {this.state.severeToxicity}</p>\n        <p>Sexual explicit likelihood: {this.state.sexualExplicit}</p>\n        <p>Threat likelihood: {this.state.threat}</p>\n        <p>Toxicity likelihood: {this.state.toxicity}</p>\n      </div>\n      \n      {/* render the visualization */}\n      {/* {this.solveViz()} */}\n      \n    \n    </div>\n    );\n  }\n}\n\nexport default Tweet;\n","import './App.css';\nimport './styles.css';\nimport React from 'react';\nimport Header from './Header';\nimport Tweet from './Tweet';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Tweet />\n    </div>\n  )\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}