{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","state","predictions","predictObj","sentence","barData","surface","name","tab","toxicity","this","resolveModel","model","classify","classifying","setState","results","probabilities","console","log","tfvis","barchart","outputArr","key","hasOwnProperty","push","index","value","className","type","onChange","e","target","onClick","predict","getBarValue","solveViz","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iaAkHeA,E,kDA1Gb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,YAAa,KACbC,WAAa,GACbC,SAAU,WACVC,QAAU,IAIZ,EAAKC,QAAU,CAAEC,KAAM,YAAaC,IAAK,UAVxB,E,2KAcC,G,SAELC,IAFK,I,gNAMNL,G,yFACQM,KAAKC,e,cAAnBC,E,gBACoBA,EAAMC,SAAS,CAACT,I,cAApCU,E,OACNJ,KAAKK,SAAS,CACZb,YAAaY,EAAY,GAAGE,QAAQ,GAAGC,cAAc,GACrDd,WAAYW,IAGdI,QAAQC,IAAIL,G,kBACLA,EAAY,GAAGE,QAAQ,GAAGC,cAAc,I,kQAKlCG,SAAaC,SAASX,KAAKJ,QAASI,KAAKT,MAAMI,S,kLAK5D,IAAMF,EAAaO,KAAKT,MAAME,WAC1BmB,EAAY,GAChB,IAAK,IAAIC,KAAOpB,EACVA,EAAWqB,eAAeD,KAC1BL,QAAQC,IAAII,EAAM,OAASpB,EAAWoB,GAAX,OAC3BL,QAAQC,IAAIhB,EAAWoB,GAAKP,QAAQ,GAAGC,cAAc,IAErDK,EAAUG,KAAK,CAACC,MAAOvB,EAAWoB,GAAX,MAA0BI,MAAOxB,EAAWoB,GAAKP,QAAQ,GAAGC,cAAc,MAGvGP,KAAKK,SAAS,CAACV,QAASiB,IACxBJ,QAAQC,IAAI,WAAWT,KAAKT,MAAMI,W,+BAG1B,IAAD,OAQP,OAHAa,QAAQC,IAAI,aAAaT,KAAKT,MAAMC,aACpCgB,QAAQC,IAAI,cAAcT,KAAKT,MAAME,YACrCe,QAAQC,IAAI,WAAWT,KAAKT,MAAMI,SAEhC,sBAAKuB,UAAU,MAAf,UACA,oDACA,uBACEC,KAAK,OACLF,MAAOjB,KAAKT,MAAMG,SAClB0B,SAAU,SAACC,GAAD,OAAO,EAAKhB,SAAS,CAACX,SAAU2B,EAAEC,OAAOL,WAErD,wBAAQM,QAAS,WAEb,EAAKC,QAAQ,EAAKjC,MAAMG,UAExB,EAAK+B,cAGLjB,QAAQC,IAAI,WAAW,EAAKlB,MAAMI,UAPtC,oBAeA,wBAAQ4B,QAAS,WAGb,EAAKE,cAEL,EAAKC,WACLlB,QAAQC,IAAI,WAAW,EAAKlB,MAAMI,UANtC,2BAtBA,wBAiCsBK,KAAKT,MAAMC,mB,GAjGrBmC,IAAMC,WCMTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0af8baf8.chunk.js","sourcesContent":["import './App.css';\nimport React from 'react';\nimport * as tf from '@tensorflow/tfjs';\nimport * as tfvis from '@tensorflow/tfjs-vis';\nimport * as toxicity from '@tensorflow-models/toxicity';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      predictions: null,\n      predictObj : {},\n      sentence: 'you suck',\n      barData : []\n    };\n\n    // Render to visor\n    this.surface = { name: 'Bar chart', tab: 'Charts' };\n  }\n\n  async resolveModel() {\n    const threshold = 0.9;\n    // create model\n    return await toxicity.load(threshold);\n    // console.log(model)\n  }\n  \n  async predict(sentence) {\n    const model = await this.resolveModel()\n    const classifying = await model.classify([sentence])\n    this.setState({\n      predictions: classifying[6].results[0].probabilities[1],\n      predictObj: classifying\n    })\n    \n    console.log(classifying)\n    return classifying[6].results[0].probabilities[1]\n  }\n\n  //render the visualization\n  async solveViz() {\n    return await tfvis.render.barchart(this.surface, this.state.barData)\n  }\n\n  // get the values for the bar chart from the predictions\n  getBarValue() {\n    const predictObj = this.state.predictObj\n    let outputArr = []\n    for (let key in predictObj) {\n      if (predictObj.hasOwnProperty(key)) {\n          console.log(key + \" -> \" + predictObj[key]['label']);\n          console.log(predictObj[key].results[0].probabilities[1])\n          //append object to output array\n          outputArr.push({index: predictObj[key]['label'], value: predictObj[key].results[0].probabilities[1]})\n      }\n    }\n    this.setState({barData: outputArr})\n    console.log('bar data',this.state.barData)\n  }\n\n  render() {\n    \n    // console.log(tfvis.render.barchart(surface, data))\n    // render the visualization \n    // console.log(this.solveViz())\n    console.log('prediction',this.state.predictions)\n    console.log('predict obj',this.state.predictObj)\n    console.log('bar data',this.state.barData)\n    return (\n      <div className=\"App\">\n      <p>What is your tweet?</p>\n      <input \n        type=\"text\" \n        value={this.state.sentence} \n        onChange={(e) => this.setState({sentence: e.target.value})} \n      />\n      <button onClick={() => \n        {\n          this.predict(this.state.sentence)\n          //get the value for the bar graph\n          this.getBarValue()\n          // re render the visuals\n          // this.solveViz()\n          console.log('bar data',this.state.barData)\n          // tfvis.render.barchart(this.surface, this.state.barData)\n        }}\n      >\n        Submit\n      </button>\n\n\n      <button onClick={() => \n        {\n          //get the value for the bar graph\n          this.getBarValue()\n          // re render the visuals\n          this.solveViz()\n          console.log('bar data',this.state.barData)\n        }}\n      >\n        Click for Viz\n      </button>\n      Toxicity likelihood: {this.state.predictions}\n      \n      {/* render the visualization */}\n      {/* {this.solveViz()} */}\n      \n    \n    </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}