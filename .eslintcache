[{"/Users/liyatilahun/dev/int2.2/tweet-toxicity/src/App.js":"1"},{"size":3248,"mtime":1610348828147,"results":"2","hashOfConfig":"3"},{"filePath":"4","messages":"5","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"6"},"1jelwaz","/Users/liyatilahun/dev/int2.2/tweet-toxicity/src/App.js",["7"],"import './App.css';\nimport React from 'react';\nimport * as tf from '@tensorflow/tfjs';\nimport * as tfvis from '@tensorflow/tfjs-vis';\nimport * as toxicity from '@tensorflow-models/toxicity';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      predictions: null,\n      predictObj : {},\n      sentence: 'you suck',\n      barData : []\n    };\n\n     const series1 = Array(100).fill(0)\n   .map(y => Math.random() * 100 + 50)\n   .map((y, x) => ({ x, y, }));\n\n   \n   console.log(series1)\n    // Render to visor\n    this.surface = { name: 'Bar chart', tab: 'Charts' };\n  }\n\n  async resolveModel() {\n    const threshold = 0.9;\n    // create model\n    return await toxicity.load(threshold);\n    // console.log(model)\n  }\n  \n  async predict(sentence) {\n    const model = await this.resolveModel()\n    const classifying = await model.classify([sentence])\n    this.setState({\n      predictions: classifying[6].results[0].probabilities[0],\n      predictObj: classifying\n    })\n    \n    console.log(classifying)\n    return classifying[6].results[0].probabilities[0]\n  }\n\n  //render the visualization\n  async solveViz() {\n    return await tfvis.render.barchart(this.surface, this.state.barData)\n  }\n\n  // get the values for the bar chart from the predictions\n  getBarValue() {\n    const predictObj = this.state.predictObj\n    let outputArr = []\n    for (let key in predictObj) {\n      if (predictObj.hasOwnProperty(key)) {\n          console.log(key + \" -> \" + predictObj[key]['label']);\n          console.log(predictObj[key].results[0].probabilities[0])\n          //append object to output array\n          outputArr.push({index: predictObj[key]['label'], value: predictObj[key].results[0].probabilities[0]})\n      }\n    }\n    this.setState({barData: outputArr})\n    console.log('bar data',this.state.barData)\n  }\n\n  render() {\n    \n    // console.log(tfvis.render.barchart(surface, data))\n    // render the visualization \n    // console.log(this.solveViz())\n    console.log('prediction',this.state.predictions)\n    console.log('predict obj',this.state.predictObj)\n    console.log('bar data',this.state.barData)\n    return (\n      <div className=\"App\">\n      <p>What is your terrible sentence?</p>\n      <input \n        type=\"text\" \n        value={this.state.sentence} \n        onChange={(e) => this.setState({sentence: e.target.value})} \n      />\n      <button onClick={() => \n        {\n          this.predict(this.state.sentence)\n          //get the value for the bar graph\n          this.getBarValue()\n          // re render the visuals\n          // this.solveViz()\n          console.log('bar data',this.state.barData)\n          // tfvis.render.barchart(this.surface, this.state.barData)\n        }}\n      >\n        Submit\n      </button>\n\n\n      <button onClick={() => \n        {\n          //get the value for the bar graph\n          this.getBarValue()\n          // re render the visuals\n          this.solveViz()\n          console.log('bar data',this.state.barData)\n        }}\n      >\n        Click for Viz\n      </button>\n      Toxicity likelihood: {this.state.predictions}\n      \n      {/* render the visualization */}\n      {/* {this.solveViz()} */}\n      \n    \n    </div>\n    );\n  }\n}\n\nexport default App;\n",{"ruleId":"8","severity":1,"message":"9","line":3,"column":13,"nodeType":"10","messageId":"11","endLine":3,"endColumn":15},"no-unused-vars","'tf' is defined but never used.","Identifier","unusedVar"]