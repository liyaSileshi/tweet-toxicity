[{"/Users/liyatilahun/dev/int2.2/tweet-toxicity/src/App.js":"1","/Users/liyatilahun/dev/int2.2/tweet-toxicity/src/reportWebVitals.js":"2","/Users/liyatilahun/dev/int2.2/tweet-toxicity/src/Header.js":"3","/Users/liyatilahun/dev/int2.2/tweet-toxicity/src/Tweet.js":"4"},{"size":257,"mtime":1610418627166,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":1610080112357,"results":"7","hashOfConfig":"6"},{"size":167,"mtime":1610418854828,"results":"8","hashOfConfig":"6"},{"size":4302,"mtime":1610430575003,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1jelwaz",{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},"/Users/liyatilahun/dev/int2.2/tweet-toxicity/src/App.js",[],"/Users/liyatilahun/dev/int2.2/tweet-toxicity/src/reportWebVitals.js",[],"/Users/liyatilahun/dev/int2.2/tweet-toxicity/src/Header.js",["19"],"/Users/liyatilahun/dev/int2.2/tweet-toxicity/src/Tweet.js",["20"],"import './App.css';\nimport './styles.css';\nimport './Tweet.css';\nimport React from 'react';\nimport * as tf from '@tensorflow/tfjs';\nimport * as tfvis from '@tensorflow/tfjs-vis';\nimport * as toxicity from '@tensorflow-models/toxicity';\n\n\nclass Tweet extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      // predictions: null,\n      predictObj : {},\n      sentence: '',\n      barData : [],\n      toxicity: 0,\n      identityAttack: 0,\n      insult: 0,\n      obscene: 0,\n      severeToxicity: 0,\n      sexualExplicit: 0,\n      threat: 0\n    };\n\n    // Render to visor\n    this.surface = { name: 'Bar chart', tab: 'Charts' };\n  }\n\n  async resolveModel() {\n    const threshold = 0.9;\n    // create model\n    return await toxicity.load(threshold);\n    // console.log(model)\n  }\n  \n  async predict(sentence) {\n    const model = await this.resolveModel()\n    const classifying = await model.classify([sentence])\n    this.setState({\n      identityAttack: classifying[0].results[0].probabilities[1].toFixed(3),\n      insult: classifying[1].results[0].probabilities[1].toFixed(3),\n      obscene: classifying[2].results[0].probabilities[1].toFixed(3),\n      severeToxicity: classifying[3].results[0].probabilities[1].toFixed(3),\n      sexualExplicit: classifying[4].results[0].probabilities[1].toFixed(3),\n      threat: classifying[5].results[0].probabilities[1].toFixed(3),\n      toxicity: classifying[6].results[0].probabilities[1].toFixed(3),\n      predictObj: classifying\n    })\n    console.log(classifying)\n    return classifying[6].results[0].probabilities[1]\n  }\n\n  //render the visualization\n  async solveViz() {\n    return await tfvis.render.barchart(this.surface, this.state.barData)\n  }\n\n  // get the values for the bar chart from the predictions\n  getBarValue() {\n    const predictObj = this.state.predictObj\n    let outputArr = []\n    for (let key in predictObj) {\n      if (predictObj.hasOwnProperty(key)) {\n          console.log(key + \" -> \" + predictObj[key]['label']);\n          console.log(predictObj[key].results[0].probabilities[1])\n          //append object to output array\n          outputArr.push({index: predictObj[key]['label'], value: predictObj[key].results[0].probabilities[1]})\n      }\n    }\n    this.setState({barData: outputArr})\n    console.log('bar data',this.state.barData)\n  }\n\n  render() {\n    \n    // console.log(tfvis.render.barchart(surface, data))\n    // render the visualization \n    // console.log(this.solveViz())\n    console.log('prediction',this.state.predictions)\n    console.log('predict obj',this.state.predictObj)\n    console.log('bar data',this.state.barData)\n    return (\n\n      <div className=\"App\">\n      <p className='h1'>What is your tweet? üê¶</p>\n      <input \n        placeholder='type something here...'\n        type=\"text\" \n        value={this.state.sentence} \n        onChange={(e) => this.setState({sentence: e.target.value})} \n      />\n      \n      <button \n        type='submit'\n        onClick={() => \n        {\n          this.predict(this.state.sentence)\n          //get the value for the bar graph\n          this.getBarValue()\n          // re render the visuals\n          // this.solveViz()\n          console.log('bar data',this.state.barData)\n          // tfvis.render.barchart(this.surface, this.state.barData)\n        }}\n      >\n        Submit\n      \n      </button>\n\n\n      <button \n        className='success'\n        onClick={() => \n        {\n          //get the value for the bar graph\n          this.getBarValue()\n          // re render the visuals\n          this.solveViz()\n          console.log('bar data',this.state.barData)\n        }}\n      >\n        Click for Viz\n      </button>\n      <div className='data'>\n        <p>Identity attack likelihood: {this.state.identityAttack}</p>\n        <p>Insult likelihood: {this.state.insult}</p>\n        <p>Obscene likelihood: {this.state.obscene}</p>\n        <p>Severe toxicity likelihood: {this.state.severeToxicity}</p>\n        <p>Sexual explicit likelihood: {this.state.sexualExplicit}</p>\n        <p>Threat likelihood: {this.state.threat}</p>\n        <p>Toxicity likelihood: {this.state.toxicity}</p>\n      </div>\n      \n      {/* render the visualization */}\n      {/* {this.solveViz()} */}\n      \n    \n    </div>\n    );\n  }\n}\n\nexport default Tweet;\n",{"ruleId":"21","severity":1,"message":"22","line":7,"column":5,"nodeType":"23","endLine":7,"endColumn":28},{"ruleId":"24","severity":1,"message":"25","line":5,"column":13,"nodeType":"26","messageId":"27","endLine":5,"endColumn":15},"jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","JSXOpeningElement","no-unused-vars","'tf' is defined but never used.","Identifier","unusedVar"]